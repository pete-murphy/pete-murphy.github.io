<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WIP</title>
  <link href="https://ptrfrncsmrph.github.io" rel="self" type="application/rss+xml" />
  <updated></updated>
  <author>
    <name>Pete</name>
  </author>
  <id>https://ptrfrncsmrph.github.io/</id>

  <entry>
    <title>A syntax-driven intuition for Cont</title>
    <link href="https://ptrfrncsmrph.github.ioposts/2023-05-30-cont-and-managed.html"/>
    <id>https://ptrfrncsmrph.github.ioposts/2023-05-30-cont-and-managed.html</id>
    <updated>2023-05-30T00:00:00Z</updated>
    <category term="haskell"/>
    <category term="purescript"/>
    <category term="cont"/>
    <summary></summary>
    <content type="html"><![CDATA[<p>Based on the <a
href="https://hackage.haskell.org/package/managed-1.0.10/docs/src/Control.Monad.Managed.html#Managed">internal
accessor <code>(&gt;&gt;-)</code></a> from Gabriella Gonzalez’s
<code>managed</code> library.</p>
<p>PureScript allows us to override the default <code>bind</code>
implementation and re-purpose the <code>do</code> syntax sugar (we could
do the same in Haskell with <code>RebindableSyntax</code> enabled).</p>
<multicodeblock-tabs>
<multicodeblock-tab role="heading" slot="tab">PureScript (with infix operator)</multicodeblock-tab>
<multicodeblock-panel role="region" slot="panel">
<div class="sourceCode" id="cb1"><pre
class="sourceCode purescript"><code class="sourceCode purescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Prelude</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Cont</span> r a <span class="ot">=</span> <span class="dt">Cont</span> ((a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ot">runCont ::</span> <span class="kw">forall</span> r a<span class="op">.</span> <span class="dt">Cont</span> r a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>runCont (<span class="dt">Cont</span> f) <span class="ot">=</span> f</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="kw">infixl</span> <span class="dv">1</span> runCont as <span class="op">&gt;&gt;-</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">map</span> f ma <span class="ot">=</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>      ma <span class="op">&gt;&gt;-</span> \a <span class="ot">-&gt;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        pure&#39; (f a)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Apply</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>  apply mab ma <span class="ot">=</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>      mab <span class="op">&gt;&gt;-</span> \ab <span class="ot">-&gt;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        ma <span class="op">&gt;&gt;-</span> \a <span class="ot">-&gt;</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>          pure&#39; (ab a)</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> a <span class="ot">=</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>      pure&#39; a</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Bind</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>  bind ma amb <span class="ot">=</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>      ma <span class="op">&gt;&gt;-</span> \a <span class="ot">-&gt;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>        amb a <span class="op">&gt;&gt;-</span> \b <span class="ot">-&gt;</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>          pure&#39; b</span></code></pre></div>
</multicodeblock-panel>
<multicodeblock-tab role="heading" slot="tab">PureScript (with do)</multicodeblock-tab>
<multicodeblock-panel role="region" slot="panel">
<div class="sourceCode" id="cb2"><pre
class="sourceCode purescript"><code class="sourceCode purescript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Prelude</span> <span class="kw">hiding</span> (bind)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Cont</span> r a <span class="ot">=</span> <span class="dt">Cont</span> ((a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">bind ::</span> <span class="kw">forall</span> r a<span class="op">.</span> <span class="dt">Cont</span> r a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>bind (<span class="dt">Cont</span> f) <span class="ot">=</span> f</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">map</span> f ma <span class="ot">=</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>      a <span class="ot">&lt;-</span> ma</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>      pure&#39; (f a)</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Apply</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>  apply mab ma <span class="ot">=</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>      ab <span class="ot">&lt;-</span> mab</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>      a <span class="ot">&lt;-</span> ma</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>      pure&#39; (ab a)</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> a <span class="ot">=</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>      pure&#39; a</span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Bind</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>  bind ma amb <span class="ot">=</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>      a <span class="ot">&lt;-</span> ma</span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>      b <span class="ot">&lt;-</span> amb a</span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>      pure&#39; b</span></code></pre></div>
</multicodeblock-panel>

</multicodeblock-tabs>]]></content>
  </entry>
  <entry>
    <title>React Router and View Transitions</title>
    <link href="https://ptrfrncsmrph.github.ioposts/2023-05-17-react-router-view-transitions-api.html"/>
    <id>https://ptrfrncsmrph.github.ioposts/2023-05-17-react-router-view-transitions-api.html</id>
    <updated>2023-05-17T00:00:00Z</updated>
    <category term="react"/>
    <category term="react-router"/>
    <category term="view transitions"/>
    <summary></summary>
    <content type="html"><![CDATA[<h2 id="container-transform">Container transform</h2>
<p>Recently I wanted to implement something like what Material UI calls
the <a
href="https://m3.material.io/styles/motion/transitions/transition-patterns#b67cba74-6240-4663-a423-d537b6d21187">container
transform pattern</a>. From the Material 3 docs:</p>
<blockquote>
<p>This pattern is used to seamlessly transform an element to show more
detail, like a card expanding into a details page. […] Persistent
elements are used to seamlessly connect the start and end state of the
transition.</p>
</blockquote>
<p>Here’s a simple example in a GIF</p>
<figure>
<img src="../images/2023-05-21-container-transform.gif"
alt="An example from the Material UI documentation" />
<figcaption aria-hidden="true">An example from the Material UI
documentation</figcaption>
</figure>
<p>The pattern isn’t unique to Material or Google, it’s used for example
in iOS when opening an app from the home screen. I can’t speak on how
this is implemented on mobile, but on the web the implementation has
historically been complicated by the variety of layout rules that need
to be taken into account (Cassie Evans has an excellent <a
href="https://www.youtube.com/watch?v=POBxxUkvHi4">talk about the
difficulties involved here</a>).</p>
<h2 id="flip">FLIP</h2>
<p>The solution that folks seem to have landed on for this is the <a
href="https://aerotwist.com/blog/flip-your-animations/">FLIP
technique</a>. It’s a bit of a magic trick that involves moving the
element to its final state and then applying a <code>transform</code> so
that we can efficiently animate <em>from</em> the initial state.</p>
<blockquote>
<p>… [I]nstead of animating “straight ahead” and potentially doing
expensive calculations on every single frame we precalculate the
animation dynamically and let it play out cheaply.</p>
</blockquote>
<p>There are some libraries for implementing this, like <a
href="https://greensock.com/docs/v3/Plugins/Flip/">GSAP</a> or <a
href="https://github.com/davidkpiano/flipping">Flipping.js</a>. In
React, <code>framer/motion</code> provides a high-level API for using
this technique to achieve “shared layout animations” with its <a
href="https://www.framer.com/motion/layout-group/"><code>LayoutGroup</code></a>
component.</p>
<h2 id="view-transitions-api">View Transitions API</h2>
<p>But there’s also a new high-level API coming to the browser, in the
<a
href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API">View
Transitions API</a>. This is still a <a
href="https://drafts.csswg.org/css-view-transitions-1/">draft
specification</a> at time of writing, but it’s landed in Chrome. There’s
a nice <a
href="https://developer.chrome.com/docs/web-platform/view-transitions/">write-up
by the Chrome team</a> that serves as a tutorial for using in a
framework-less SPA. Getting this to work in a React app where we don’t
normally manage DOM updates (especially for route transitions) is a bit
trickier.</p>
<!-- <image-loader
placeholder="../images/2023-05-21-demo/small.gif"
full-image="../images/2023-05-21-demo/large.gif"
/> -->
<figure>
<img src="../images/2023-05-21-demo/large.gif"
alt="A simple demo using React Router" />
<figcaption aria-hidden="true">A simple demo using React
Router</figcaption>
</figure>
<p>After a bit of trial-and-error I got a demo working using animated
transitions between routes with React Router. Here’s the repo: <a
href="https://github.com/ptrfrncsmrph/react-view-transitions-api">https://github.com/ptrfrncsmrph/react-view-transitions-api</a>.</p>
<h2 id="some-rough-edges">Some rough edges</h2>
<p><code>startViewTransition</code> takes a callback that
<em>synchronously</em> updates the DOM. The only way I could figure to
do so was using React Router’s <code>useNavigate</code> and a button
with a click handler instead of <code>Link</code> 😔. We then need to
wrap the call to <code>navigate</code> in <code>flushSync</code> to
force the synchronous update.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="bu">document</span><span class="op">.</span><span class="fu">startViewTransition</span>(() <span class="kw">=&gt;</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  ReactDOM<span class="op">.</span><span class="fu">flushSync</span>(() <span class="kw">=&gt;</span> {</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">navigate</span>(nextRoute)<span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  })<span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>The React docs warn that <code>flushSync</code> should be used as a
“last resort”, and this API does seem to be at odds with the React
mental model that doesn’t normally care about <em>when</em> DOM updates
happen.</p>
<p>Another awkward bit is the need to toggle the
<code>viewTransitionName</code>s for transitioning elements.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> (ref<span class="op">.</span><span class="at">current</span>) {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  ref<span class="op">.</span><span class="at">current</span><span class="op">.</span><span class="at">style</span><span class="op">.</span><span class="at">viewTransitionName</span> <span class="op">=</span> <span class="st">&quot;movie-image&quot;</span><span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>There needs to be exactly one element with the
<code>"movie-image"</code> transition name at any given time, so <a
href="https://developer.chrome.com/docs/web-platform/view-transitions/#transitioning-elements-dont-need-to-be-the-same-dom-element">the
recommendation</a> seems to be to <em>assign the tag name in the event
handler</em>.</p>
<p>A nicer alternative might be to give unique names to each element,
like <code>movie-image-${movie.id}</code> and then select pairs with
<code>::view-transition-group(movie-image-*)</code> but that syntax
doesn’t exist and as far as I can tell the only way of achieving this
currently would require creating just as many rules in the style sheet
as there are pairs of elements you’d want to target. I started <a
href="https://github.com/ptrfrncsmrph/react-view-transitions-api/compare/main...dynamic-style-sheet-rules">going
down that road</a> but couldn’t get it to work (the transitions
<em>did</em> apply but looked janky for reasons I couldn’t understand).
<em>(I think this is also the approach one of the authors of the spec
tried in this repo but seems like it had complications: <a
href="https://github.com/jakearchibald/wordle-analyzer/pull/19">https://github.com/jakearchibald/wordle-analyzer/pull/19</a>)</em></p>
<p>This unique name constraint makes “back navigation” transitions (from
detail to list view) <a
href="https://github.com/ptrfrncsmrph/react-view-transitions-api/commit/9c2a2775a34a2ea8e3a7e1ff90881cb4c8cf4e53#diff-26ad4b834941d9b19ebf9db8082bd202aaf72ea0ddea85f5a8a0cb3c729cc6f2">messy</a>.
The event handler doesn’t have direct access to what we want to target
as the <code>view-transition-new</code> element, so we need to find it
in the DOM, assign the transition name, wait for the transition to
complete, and finally remove the name (so it can be reassigned to the
next item that gets clicked).</p>]]></content>
  </entry>
  <entry>
    <title>State Reducer &amp; the Reader Applicative</title>
    <link href="https://ptrfrncsmrph.github.ioposts/2019-04-11-state-reducer-and-reader-applicative.html"/>
    <id>https://ptrfrncsmrph.github.ioposts/2019-04-11-state-reducer-and-reader-applicative.html</id>
    <updated>2019-04-11T00:00:00Z</updated>
    <category term="react"/>
    <category term="state reducer"/>
    <category term="reader"/>
    <summary></summary>
    <content type="html"><![CDATA[<figure>
<img
src="https://miro.medium.com/v2/resize:fit:1400/0*dCaXfYO02-X22VR3.jpg"
class="full-width" alt="Kate Winslet in The Reader (2008)" />
<figcaption aria-hidden="true">Kate Winslet in <strong><em>The
Reader</em></strong> (2008)</figcaption>
</figure>
<p>Kent C. Dodds <a
href="https://kentcdodds.com/blog/the-state-reducer-pattern-with-react-hooks">recently
wrote about</a> porting his “state reducer” pattern to the new React
hooks API. I’m going to assume some understanding of that blog post (or
<a href="https://youtu.be/AiJ8tRRH0f8">this video</a> where he presents
the same concept) going forward, but in short, state reducer is a way of
implementing the <em>inversion of control</em> principle in a component
library by allowing a user of a component to pass in a
<code>reducer</code> function that will be called by the library code on
each state update. This enables the user to make some custom changes to
suit whatever specialized use case, and frees the library author from
covering every possible use case (also avoiding the bloated code that
would result from doing so).</p>
<p>Looking through the implementation of how Kent implements this
pattern, I was reminded of another pattern from functional programming
that I was learning at the same time called Reader. I wanted to explore
how you might implement the former in terms of the latter, not because I
think it offers any improvement necessarily, I just find it helpful to
draw parallels between patterns to help gain a deeper understanding.</p>
<h2 id="state-reducer-pattern">State Reducer Pattern</h2>
<p>Let’s pick up where Kent’s blog post leaves off: he’s got a working
(though he admits “contrived”) <code>useToggle</code> hook that can be
used to create a <code>Toggle</code> component. The
<code>useToggle</code> hook takes as parameter an object with a
<code>reducer</code> property, which is a function with the standard
reducer type signature of <code>(state, action)</code> to
<code>state</code> with an important embellishment: the action has a
<code>changes</code> property attached to it. This <code>changes</code>
property is populated by the library code, when it runs its own
<code>toggleReducer</code> function. So <code>toggleReducer</code> has
the signature of <code>(state, action)</code> to <code>changes</code>.
This is a little convoluted to think through without looking at an
example and the blog post does a good job of building up to this point.
Here’s the final code of how this works in a simple example (also <a
href="https://codesandbox.io/s/9j0pkq30lo">here in a
CodeSandbox</a>):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> React <span class="im">from</span> <span class="st">&quot;react&quot;</span><span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> ReactDOM <span class="im">from</span> <span class="st">&quot;react-dom&quot;</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> Switch <span class="im">from</span> <span class="st">&quot;./switch&quot;</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> actionTypes <span class="op">=</span> {</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">toggle</span><span class="op">:</span> <span class="st">&quot;TOGGLE&quot;</span><span class="op">,</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">on</span><span class="op">:</span> <span class="st">&quot;ON&quot;</span><span class="op">,</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="dt">off</span><span class="op">:</span> <span class="st">&quot;OFF&quot;</span><span class="op">,</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">toggleReducer</span>(state<span class="op">,</span> action) {</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">switch</span> (action<span class="op">.</span><span class="at">type</span>) {</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> actionTypes<span class="op">.</span><span class="at">toggle</span><span class="op">:</span> {</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> { <span class="dt">on</span><span class="op">:</span> <span class="op">!</span>state<span class="op">.</span><span class="at">on</span> }<span class="op">;</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> actionTypes<span class="op">.</span><span class="at">on</span><span class="op">:</span> {</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> { <span class="dt">on</span><span class="op">:</span> <span class="kw">true</span> }<span class="op">;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> actionTypes<span class="op">.</span><span class="at">off</span><span class="op">:</span> {</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> { <span class="dt">on</span><span class="op">:</span> <span class="kw">false</span> }<span class="op">;</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">default</span><span class="op">:</span> {</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>      <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">Error</span>(<span class="vs">`Unhandled type: </span><span class="sc">${</span>action<span class="op">.</span><span class="at">type</span><span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">useToggle</span>({ reducer <span class="op">=</span> toggleReducer } <span class="op">=</span> {}) {</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [{ on }<span class="op">,</span> dispatch] <span class="op">=</span> React<span class="op">.</span><span class="fu">useReducer</span>(reducer<span class="op">,</span> { <span class="dt">on</span><span class="op">:</span> <span class="kw">false</span> })<span class="op">;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> toggle <span class="op">=</span> () <span class="kw">=&gt;</span> <span class="fu">dispatch</span>({ <span class="dt">type</span><span class="op">:</span> actionTypes<span class="op">.</span><span class="at">toggle</span> })<span class="op">;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> setOn <span class="op">=</span> () <span class="kw">=&gt;</span> <span class="fu">dispatch</span>({ <span class="dt">type</span><span class="op">:</span> actionTypes<span class="op">.</span><span class="at">on</span> })<span class="op">;</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> setOff <span class="op">=</span> () <span class="kw">=&gt;</span> <span class="fu">dispatch</span>({ <span class="dt">type</span><span class="op">:</span> actionTypes<span class="op">.</span><span class="at">off</span> })<span class="op">;</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> { on<span class="op">,</span> toggle<span class="op">,</span> setOn<span class="op">,</span> setOff }<span class="op">;</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a><span class="co">// export {useToggle, actionTypes, toggleReducer, actionTypes}</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">Toggle</span>() {</span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [clicksSinceReset<span class="op">,</span> setClicksSinceReset] <span class="op">=</span> React<span class="op">.</span><span class="fu">useState</span>(<span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> tooManyClicks <span class="op">=</span> clicksSinceReset <span class="op">&gt;=</span> <span class="dv">4</span><span class="op">;</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> { on<span class="op">,</span> toggle<span class="op">,</span> setOn<span class="op">,</span> setOff } <span class="op">=</span> <span class="fu">useToggle</span>({</span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>    <span class="fu">reducer</span>(currentState<span class="op">,</span> action) {</span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>      <span class="kw">const</span> changes <span class="op">=</span> <span class="fu">toggleReducer</span>(currentState<span class="op">,</span> action)<span class="op">;</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> (tooManyClicks <span class="op">&amp;&amp;</span> action<span class="op">.</span><span class="at">type</span> <span class="op">===</span> actionTypes<span class="op">.</span><span class="at">toggle</span>) {</span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>        <span class="co">// other changes are fine, but on needs to be unchanged</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> { <span class="op">...</span>changes<span class="op">,</span> <span class="dt">on</span><span class="op">:</span> currentState<span class="op">.</span><span class="at">on</span> }<span class="op">;</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>      } <span class="cf">else</span> {</span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>        <span class="co">// the changes are fine</span></span>
<span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> changes<span class="op">;</span></span>
<span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>      }</span>
<span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>    }<span class="op">,</span></span>
<span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>  })<span class="op">;</span></span>
<span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> (</span>
<span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;</span>div<span class="op">&gt;</span></span>
<span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;</span>button onClick<span class="op">=</span>{setOff}<span class="op">&gt;</span>Switch Off<span class="op">&lt;/</span>button<span class="op">&gt;</span></span>
<span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;</span>button onClick<span class="op">=</span>{setOn}<span class="op">&gt;</span>Switch On<span class="op">&lt;/</span>button<span class="op">&gt;</span></span>
<span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;</span>Switch</span>
<span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>        onClick<span class="op">=</span>{() <span class="kw">=&gt;</span> {</span>
<span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>          <span class="fu">toggle</span>()<span class="op">;</span></span>
<span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>          <span class="fu">setClicksSinceReset</span>((count) <span class="kw">=&gt;</span> count <span class="op">+</span> <span class="dv">1</span>)<span class="op">;</span></span>
<span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>        }}</span>
<span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>        on<span class="op">=</span>{on}</span>
<span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>      <span class="op">/&gt;</span></span>
<span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>      {tooManyClicks <span class="op">?</span> (</span>
<span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;</span>button onClick<span class="op">=</span>{() <span class="kw">=&gt;</span> <span class="fu">setClicksSinceReset</span>(<span class="dv">0</span>)}<span class="op">&gt;</span>Reset<span class="op">&lt;/</span>button<span class="op">&gt;</span></span>
<span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a>      ) <span class="op">:</span> <span class="kw">null</span>}</span>
<span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;/</span>div<span class="op">&gt;</span></span>
<span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>  )<span class="op">;</span></span>
<span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">App</span>() {</span>
<span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="op">&lt;</span>Toggle <span class="op">/&gt;;</span></span>
<span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>}</span>
<span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a>ReactDOM<span class="op">.</span><span class="fu">render</span>(<span class="op">&lt;</span>App <span class="op">/&gt;,</span> <span class="bu">document</span><span class="op">.</span><span class="fu">getElementById</span>(<span class="st">&quot;root&quot;</span>))<span class="op">;</span></span></code></pre></div>
<p>I found this a bit tricky to follow at first but the gist of it is
that as a user of the <code>useToggle</code> hook, I can add in some
custom logic that could modify how the component’s internal state gets
updated.</p>
<h2 id="introducing-reader">Introducing Reader</h2>
<p>At this point, I’d like to introduce you to Reader, specifically the
Reader applicative instance, which helped me get a better grasp of the
state reducer pattern. Reader is just a function whose input is fixed to
some type, which might not seem very special, but is a very useful
pattern in the functional programming paradigm where you’ll often see it
referred to as the Reader Monad. I’m not going to cover the “M” word
here; all we need is the weaker, humbler applicative instance for
Reader. To get an applicative instance for some type we need to
implement a couple functions that work for that type.</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">pure</span><span class="ot"> ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> f a</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="ot">lift2 ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b <span class="ot">-&gt;</span> f c</span></code></pre></div>
<p>Let’s narrow our focus to <code>lift2</code> (sometimes called
<code>liftA2</code>) for now. We just want to write a <code>lift2</code>
that works for Reader, which we said was a function whose input type is
fixed, i.e., <code>r -&gt;</code> where <code>r</code> is the input type
and so <code>r -&gt;</code> might be pronounced “<em>a function
from</em> <code>r</code> <em>to …“</em> So then we can replace all the
<code>f</code>s in the above signature with <code>r -&gt;</code>:</p>
<div class="sourceCode" id="cb3"><pre
class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">lift2 ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (r <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (r <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (r <span class="ot">-&gt;</span> c)</span></code></pre></div>
<p>The function arrow <code>-&gt;</code> associates to the right, so
that last pair of parentheses is redundant.</p>
<div class="sourceCode" id="cb4"><pre
class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">lift2 ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (r <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (r <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> r <span class="ot">-&gt;</span> c</span></code></pre></div>
<p>If you’re just barely comfortable with higher-order functions, this
is a bit daunting. The best I can offer for making sense of that
signature is to try to think of a way to read this out loud, which might
go something like: “<strong><em>lift2</em></strong> is a function that
has the type <strong><em>f</em></strong> to <strong><em>g</em></strong>
to <strong><em>h</em></strong> to <strong><em>r</em></strong> to
<strong><em>c</em></strong>, where: <strong><em>f</em></strong> is a
function of type <strong><em>a</em></strong> to
<strong><em>b</em></strong> to <strong><em>c</em></strong>;
<strong><em>g</em></strong> is a function of type
<strong><em>r</em></strong> to <strong><em>a</em></strong>; and
<strong><em>h</em></strong> is a function of type
<strong><em>r</em></strong> to <strong><em>b</em></strong>.” If this
seems pretty heavy, it is, but don’t fret and hopefully the following
implementation and explanations will fill in the gaps. What it amounts
to in JavaScript is:</p>
<div class="sourceCode" id="cb5"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> lift2 <span class="op">=</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  (abc) <span class="kw">=&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  (ra) <span class="kw">=&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  (rb) <span class="kw">=&gt;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  (<span class="op">...</span>r) <span class="kw">=&gt;</span> {</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> a <span class="op">=</span> <span class="fu">ra</span>(<span class="op">...</span>r)<span class="op">;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> b <span class="op">=</span> <span class="fu">rb</span>(<span class="op">...</span>r)<span class="op">;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">const</span> c <span class="op">=</span> <span class="fu">abc</span>(a)(b)<span class="op">;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> c<span class="op">;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>  }<span class="op">;</span></span></code></pre></div>
<p><code>abc</code> (the function from <code>a -&gt; b -&gt; c</code>)
is a way of combining the results of applying the same argument(s)
(we’re representing the fact that JavaScript functions can take an
arbitrary number of arguments by spreading <code>...r</code>) to two
functions: <code>ra</code> and <code>rb</code>. <strong>In short, all
we’re doing is running two functions with the same argument and then
doing something with the results.</strong> This sounds a lot like what
was going on with the state reducer pattern (with a few modifications).
In other words, we could refactor the <code>useToggle</code> hook to use
this <code>lift2</code>, but first we want to refactor
<code>reducer</code> and <code>toggleReducer</code> to take the same
arguments (these will be our <code>ra</code> and <code>rb</code>
functions). Let’s just have them take the regular Redux-style reducer
argument of <code>(state, action)</code>, (with no extra
<code>changes</code> property attached to action).</p>
<p>We can refactor <code>toggleReducer</code> so now it just returns a
new state:</p>
<div class="sourceCode" id="cb6"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">toggleReducer</span>(state<span class="op">,</span> action) {</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">switch</span> (action<span class="op">.</span><span class="at">type</span>) {</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> useToggle<span class="op">.</span><span class="at">types</span><span class="op">.</span><span class="at">toggle</span><span class="op">:</span> {</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> { <span class="op">...</span>state<span class="op">,</span> <span class="dt">on</span><span class="op">:</span> <span class="op">!</span>state<span class="op">.</span><span class="at">on</span> }<span class="op">;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> useToggle<span class="op">.</span><span class="at">types</span><span class="op">.</span><span class="at">on</span><span class="op">:</span> {</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> { <span class="op">...</span>state<span class="op">,</span> <span class="dt">on</span><span class="op">:</span> <span class="kw">true</span> }<span class="op">;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> useToggle<span class="op">.</span><span class="at">types</span><span class="op">.</span><span class="at">off</span><span class="op">:</span> {</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> { <span class="op">...</span>state<span class="op">,</span> <span class="dt">on</span><span class="op">:</span> <span class="kw">false</span> }<span class="op">;</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">default</span><span class="op">:</span> {</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> state<span class="op">;</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>and then we can refactor the <code>reducer</code> function coming
from the user so that it just adds whatever changes or overrides the
user wants to add:</p>
<div class="sourceCode" id="cb7"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> { on<span class="op">,</span> toggle<span class="op">,</span> setOn<span class="op">,</span> setOff } <span class="op">=</span> <span class="fu">useToggle</span>({</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">reducer</span>(currentState<span class="op">,</span> action) {</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> (tooManyClicks <span class="op">&amp;&amp;</span> action<span class="op">.</span><span class="at">type</span> <span class="op">===</span> useToggle<span class="op">.</span><span class="at">types</span><span class="op">.</span><span class="at">toggle</span>) {</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> { <span class="dt">on</span><span class="op">:</span> currentState<span class="op">.</span><span class="at">one</span> }<span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  }<span class="op">,</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>Finally, the call to <code>useReducer</code> inside of
<code>useToggle</code> will look like:</p>
<div class="sourceCode" id="cb8"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">function</span> <span class="fu">useToggle</span>({ reducer <span class="op">=</span> (_s<span class="op">,</span> _a) <span class="kw">=&gt;</span> {} } <span class="op">=</span> {}) {</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> merge <span class="op">=</span> (newState) <span class="kw">=&gt;</span> (changes) <span class="kw">=&gt;</span> ({ <span class="op">...</span>newState<span class="op">,</span> <span class="op">...</span>changes })<span class="op">;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [{ on }<span class="op">,</span> dispatch] <span class="op">=</span> React<span class="op">.</span><span class="fu">useReducer</span>(</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">lift2</span>(merge)(toggleReducer)(reducer)<span class="op">,</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    { <span class="dt">on</span><span class="op">:</span> <span class="kw">false</span> }</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  )<span class="op">;</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>Running the library-provided <code>toggleReducer</code> with
<code>(state, action)</code> gives us back <code>newState</code>, and
running the user-provided <code>reducer</code> with
<code>(state, action)</code> gives us back some custom
<code>changes</code>. We have a way of combining <code>newState</code>
and <code>changes</code> with the <code>merge</code> function. Finally,
<code>lift2</code> handles the the logic of threading the
<code>(state, action)</code> pair through the two reducer functions and
running <code>merge</code> on the results.</p>
<p>This sounds like a lot of theory, <em>but does it work?</em> Yes, it
appears to: <a href="https://codesandbox.io/s/6zx5qrvvrr">here’s both
components side-by-side in a CodeSandbox</a>.</p>
<h2 id="what-did-we-learn-here">What did we learn here?</h2>
<p>So we saw how the state reducer pattern could be rewritten using the
Reader applicative pattern. I would like to expand on what makes Reader
a worthwhile abstraction here, but I’m still learning and exploring this
stuff myself, and this post is long enough as is. I <em>think</em>
another thing we could do is leverage the applicative instance a bit
more by using <code>sequence</code> (another function that depends on
applicative) to merge a collection of overrides — if, for instance,
another user wanted to extend the first user’s extension of the library
component. I’m not sure how all that would play out, so I think that’s
all for now. Hopefully you’ve found something useful or interesting or
thought-provoking here.</p>
<figure>
<img
src="https://miro.medium.com/v2/resize:fit:1400/0*ZUmbZdEScbAGgGid.jpg"
class="full-width" alt="Tip of the iceberg in Titanic (1997)" />
<figcaption aria-hidden="true">Tip of the iceberg in
<strong>Titanic</strong> (1997)</figcaption>
</figure>
<h2 id="diving-deeper">Diving deeper</h2>
<p>This is just the tip of the iceberg for exploring these concepts:
applicative is a much more general abstraction of types that implement
an interface, and Reader has more use cases than what’s covered here. If
you’re interested in learning more, I’d highly recommend the following
resources:</p>
<ul>
<li><a
href="https://github.com/MostlyAdequate/mostly-adequate-guide"><em>Mostly
Adequate Guide to Functional Programming in JS</em></a> (free
e-book)</li>
<li><a href="http://www.tomharding.me/fantasy-land/"><em>Fantas, Eel,
and Specification</em></a> (series of blog posts)</li>
<li><span id="49e6"><a
href="https://vimeo.com/105300347"><em>Monad-a-Day: Reader</em></a>
(video)</span></li>
<li><a href="https://github.com/fantasyland/fantasy-land"><em>Fantasy
Land</em></a> and <a
href="https://github.com/rpominov/static-land"><em>Static Land</em></a>
(specifications for how these types/interfaces can be implemented in
JavaScript)</li>
</ul>]]></content>
  </entry>
  <entry>
    <title>Recursion and Folding in JavaScript</title>
    <link href="https://ptrfrncsmrph.github.ioposts/2018-10-24-recursion-and-folding.html"/>
    <id>https://ptrfrncsmrph.github.ioposts/2018-10-24-recursion-and-folding.html</id>
    <updated>2018-10-24T00:00:00Z</updated>
    <summary></summary>
    <content type="html"><![CDATA[<p>After much delay, I am finally getting around to writing a follow-up
to our first in-person meetup! This time we were talking about
<em>recursion</em> and a particular pattern that arises when applying
recursion on JavaScript arrays, which I’ll call “folding” for now.
There’s plenty to talk about with recursion, so for this post I’ll just
concentrate on folding, but keep in mind that there are plenty of other
use cases for recursion. You can look over the Git repo for the meetup
<a
href="https://github.com/ccfp/recursion-and-folding-in-js">here</a>—there
are two branches: <code>master</code> was our starting point and
solutions we worked out were pushed on to a separate branch,
<code>solved</code>.</p>
<h2 id="a-recursive-sum">A recursive <code>sum</code></h2>
<p>Let’s suppose we wanted to write a recursive <code>sum</code>
function that works on JavaScript arrays. So <code>sum([1, 3, 8])</code>
should equal <code>1 + 3 + 8</code>, or <code>12</code>. If we want to
think of this as a recursive function we want to re-frame it as a
<em>function that calls itself</em> (we’ll take this as a minimal
definition of recursion for now). OK, so instead of saying (in
pseudo-code):</p>
<div class="sourceCode" id="cb1"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sum</span>([<span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span>]) <span class="op">=</span> <span class="dv">1</span> <span class="op">+</span> <span class="dv">3</span> <span class="op">+</span> <span class="dv">8</span></span></code></pre></div>
<p>we could say</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sum</span>([<span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span>]) <span class="op">=</span> <span class="dv">1</span> <span class="op">+</span> <span class="fu">sum</span>([<span class="dv">3</span><span class="op">,</span> <span class="dv">8</span>])</span></code></pre></div>
<p>Now it’s starting to look recursive! But how do we translate that
into a function definition? Let’s try:</p>
<div class="sourceCode" id="cb3"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sum <span class="op">=</span> (arr) <span class="kw">=&gt;</span> {</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [num<span class="op">,</span> <span class="op">...</span>nums] <span class="op">=</span> arr<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> num <span class="op">+</span> <span class="fu">sum</span>(nums)<span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>Here we’re using array destructuring to get the <em>head</em>, or
first element (<code>num</code>), and <em>tail</em>, or everything but
the first element (<code>nums</code>), of our array. We’re adding the
<code>num</code> to the result of calling <code>sum</code> on the
<code>nums</code> (kind of like what we were doing with
<code>sum([1, 3, 8]) = 1 + sum([3, 8])</code>). If we try to call this
function (you can just copy paste into the console of your browser to
try it out) we get the following error:</p>
<div class="sourceCode" id="cb4"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sum</span>([<span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span>])<span class="op">;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co">// -&gt; Uncaught RangeError: Maximum call stack size exceeded</span></span></code></pre></div>
<p>This is a common error that arises when recursion goes wrong: we
didn’t tell the function to <em>stop calling itself</em> at any point,
and so it’ll keep calling <code>sum</code> on the tail
(<code>nums</code>), even when <code>nums</code> is an empty array.</p>
<p>To see what that means, let’s add a <code>console.log</code> in there
and peek at the results.</p>
<div class="sourceCode" id="cb5"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sum <span class="op">=</span> (arr) <span class="kw">=&gt;</span> {</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [num<span class="op">,</span> <span class="op">...</span>nums] <span class="op">=</span> arr<span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>({ arr<span class="op">,</span> num<span class="op">,</span> nums })<span class="op">;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> num <span class="op">+</span> <span class="fu">sum</span>(nums)<span class="op">;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>Now if we call it</p>
<div class="sourceCode" id="cb6"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sum</span>([<span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span>])<span class="op">;</span></span></code></pre></div>
<p>we’ll get this printed to the console:</p>
<div class="sourceCode" id="cb7"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>{ <span class="dt">arr</span><span class="op">:</span> [ <span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span> ]<span class="op">,</span> <span class="dt">num</span><span class="op">:</span> <span class="dv">1</span><span class="op">,</span> <span class="dt">nums</span><span class="op">:</span> [ <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span> ] }</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>{ <span class="dt">arr</span><span class="op">:</span> [ <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span> ]<span class="op">,</span> <span class="dt">num</span><span class="op">:</span> <span class="dv">3</span><span class="op">,</span> <span class="dt">nums</span><span class="op">:</span> [ <span class="dv">8</span> ] }</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>{ <span class="dt">arr</span><span class="op">:</span> [ <span class="dv">8</span> ]<span class="op">,</span> <span class="dt">num</span><span class="op">:</span> <span class="dv">8</span><span class="op">,</span> <span class="dt">nums</span><span class="op">:</span> [] }</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>{ <span class="dt">arr</span><span class="op">:</span> []<span class="op">,</span> <span class="dt">num</span><span class="op">:</span> <span class="kw">undefined</span><span class="op">,</span> <span class="dt">nums</span><span class="op">:</span> [] }</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>{ <span class="dt">arr</span><span class="op">:</span> []<span class="op">,</span> <span class="dt">num</span><span class="op">:</span> <span class="kw">undefined</span><span class="op">,</span> <span class="dt">nums</span><span class="op">:</span> [] }</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>{ <span class="dt">arr</span><span class="op">:</span> []<span class="op">,</span> <span class="dt">num</span><span class="op">:</span> <span class="kw">undefined</span><span class="op">,</span> <span class="dt">nums</span><span class="op">:</span> [] }</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>{ <span class="dt">arr</span><span class="op">:</span> []<span class="op">,</span> <span class="dt">num</span><span class="op">:</span> <span class="kw">undefined</span><span class="op">,</span> <span class="dt">nums</span><span class="op">:</span> [] }</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>{ <span class="dt">arr</span><span class="op">:</span> []<span class="op">,</span> <span class="dt">num</span><span class="op">:</span> <span class="kw">undefined</span><span class="op">,</span> <span class="dt">nums</span><span class="op">:</span> [] }</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>{ <span class="dt">arr</span><span class="op">:</span> []<span class="op">,</span> <span class="dt">num</span><span class="op">:</span> <span class="kw">undefined</span><span class="op">,</span> <span class="dt">nums</span><span class="op">:</span> [] }</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="op">...</span> (and so on<span class="op">,</span> ad nauseam<span class="op">,</span> until the stack overfloweth)</span></code></pre></div>
<p>We probably wanted to stop once we got down to the empty array, but
as you can see, our function keeps destructuring and gets a new empty
array and calls itself with that, and so on. We need some way of putting
a stop to this!</p>
<h2 id="the-base-casean-off-switch-for-the-recursive-call">The base
case—an “off switch” for the recursive call</h2>
<p>Let’s introduce a <em>base case</em>, which is just a condition that,
once met, will give us a way of opting out of the recursive call.</p>
<div class="sourceCode" id="cb8"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sum <span class="op">=</span> (arr) <span class="kw">=&gt;</span> {</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (arr<span class="op">.</span><span class="at">length</span> <span class="op">===</span> <span class="dv">0</span>) <span class="cf">return</span><span class="op">;</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [num<span class="op">,</span> <span class="op">...</span>nums] <span class="op">=</span> arr<span class="op">;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> num <span class="op">+</span> <span class="fu">sum</span>(nums)<span class="op">;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>This should stop calling <code>sum</code> once we’ve reached the
empty array <code>[]</code> (in other words, when
<code>arr.length === 0</code>) and at that point just
<code>return</code>—sounds good, right? Let’s give it a go:</p>
<div class="sourceCode" id="cb9"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sum</span>([<span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span>])<span class="op">;</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="co">// -&gt; NaN</span></span></code></pre></div>
<p>Bummer. Well, at least it’s not giving us a stack overflow, so we
must be getting closer. Let’s reason through how this is evaluating:</p>
<div class="sourceCode" id="cb10"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sum</span>([<span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span>])<span class="op">;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="co">// which we said is equal to</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span> <span class="op">+</span> <span class="fu">sum</span>([<span class="dv">3</span><span class="op">,</span> <span class="dv">8</span>])<span class="op">;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="co">// which is equal to</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span> <span class="op">+</span> <span class="dv">3</span> <span class="op">+</span> <span class="fu">sum</span>([<span class="dv">8</span>])<span class="op">;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="co">// which is equal to</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span> <span class="op">+</span> <span class="dv">3</span> <span class="op">+</span> <span class="dv">8</span> <span class="op">+</span> <span class="fu">sum</span>([])<span class="op">;</span></span></code></pre></div>
<p>and <code>sum([])</code> is our base case, and we said that was equal
to… well we just said we would <code>return</code> at that point, but
anytime you <code>return</code> without a value in JavaScript, you’re
implicitly returning <code>undefined</code>. So ultimately this is
evaluating to</p>
<div class="sourceCode" id="cb11"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="dv">1</span> <span class="op">+</span> <span class="dv">3</span> <span class="op">+</span> <span class="dv">8</span> <span class="op">+</span> <span class="kw">undefined</span><span class="op">;</span></span></code></pre></div>
<p>which is indeed <em>not a number</em> (<code>NaN</code>). If we want
to return our sum, we need to replace <code>undefined</code> with a
value that will have no effect on our summation (or addition in
general), and that would be <code>0</code>:</p>
<div class="sourceCode" id="cb12"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sum <span class="op">=</span> (arr) <span class="kw">=&gt;</span> {</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (arr<span class="op">.</span><span class="at">length</span> <span class="op">===</span> <span class="dv">0</span>) <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [num<span class="op">,</span> <span class="op">...</span>nums] <span class="op">=</span> arr<span class="op">;</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> num <span class="op">+</span> <span class="fu">sum</span>(nums)<span class="op">;</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>And now it works:</p>
<div class="sourceCode" id="cb13"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="fu">sum</span>([<span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span>])<span class="op">;</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="co">// -&gt; 12</span></span></code></pre></div>
<p>Yay! 🎉</p>
<h2 id="a-lesson-from-an-iterative-sum">A lesson from an iterative
<code>sum</code></h2>
<p>Even though we got our recursive <code>sum</code> function working,
there’s something that doesn’t feel right about returning <code>0</code>
on the last call—you’d think you’d be returning the <em>result</em> of
your summation. Like, if I were to define <code>sum</code> iteratively,
I might come up with</p>
<div class="sourceCode" id="cb14"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sum <span class="op">=</span> (arr) <span class="kw">=&gt;</span> {</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> summedValue <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> (<span class="kw">const</span> num <span class="kw">of</span> arr) {</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    summedValue <span class="op">+=</span> num<span class="op">;</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> summedValue<span class="op">;</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>And this feels more intuitive: we’re starting with <code>0</code>,
adding each <code>num</code> as we go, and at the end we’re returning
the total (<code>summedValue</code>). But, we can’t really do the same
thing in our recursive function. If we were to declare
<code>let summedValue = 0</code> in our function body, it would just get
reset to <code>0</code> on each call. What we <em>can</em> do is pass it
in as a second argument, and initialize it at <code>0</code> using ES6
default parameter syntax:</p>
<div class="sourceCode" id="cb15"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sum <span class="op">=</span> (arr<span class="op">,</span> summedValue <span class="op">=</span> <span class="dv">0</span>) <span class="kw">=&gt;</span> {</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>And then on the next recursive call we add our <code>num</code> to
the <code>summedValue</code>:</p>
<div class="sourceCode" id="cb16"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="cf">return</span> <span class="fu">sum</span>(nums<span class="op">,</span> summedValue <span class="op">+</span> num)<span class="op">;</span></span></code></pre></div>
<p>and in our base case, we just return the
<code>summedValue</code>:</p>
<div class="sourceCode" id="cb17"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> (arr<span class="op">.</span><span class="at">length</span> <span class="op">===</span> <span class="dv">0</span>) <span class="cf">return</span> summedValue<span class="op">;</span></span></code></pre></div>
<p>Altogether it looks like:</p>
<div class="sourceCode" id="cb18"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sum <span class="op">=</span> (arr<span class="op">,</span> summedValue <span class="op">=</span> <span class="dv">0</span>) <span class="kw">=&gt;</span> {</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> [num<span class="op">,</span> <span class="op">...</span>nums] <span class="op">=</span> arr<span class="op">;</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> (arr<span class="op">.</span><span class="at">length</span> <span class="op">===</span> <span class="dv">0</span>) <span class="cf">return</span> summedValue<span class="op">;</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="fu">sum</span>(nums<span class="op">,</span> summedValue <span class="op">+</span> num)<span class="op">;</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<h2 id="paring-it-down">Paring it down</h2>
<p>If we try to refactor this to something more concise, we might
get:</p>
<div class="sourceCode" id="cb19"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sum <span class="op">=</span> ([num<span class="op">,</span> <span class="op">...</span>nums]<span class="op">,</span> summedValue <span class="op">=</span> <span class="dv">0</span>) <span class="kw">=&gt;</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>  num <span class="op">===</span> <span class="kw">undefined</span> <span class="op">?</span> summedValue <span class="op">:</span> <span class="fu">sum</span>(nums<span class="op">,</span> summedValue <span class="op">+</span> num)<span class="op">;</span></span></code></pre></div>
<p>If you don’t trust me that this still works, give it the ol’
copy-paste into the console.<a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"><sup>1</sup></a> Now let’s see if we can
use this as a template to define other array functions. <em>Errr…</em>
I’m actually just going to go ahead and say that you <em>can in
fact</em> use this as a template for defining other array functions. For
example, if I just change a couple things, I’ve got
<code>reverse</code>:</p>
<div class="sourceCode" id="cb20"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> reverse <span class="op">=</span> ([num<span class="op">,</span> <span class="op">...</span>nums]<span class="op">,</span> summedValue <span class="op">=</span> []) <span class="kw">=&gt;</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>  num <span class="op">===</span> <span class="kw">undefined</span> <span class="op">?</span> summedValue <span class="op">:</span> <span class="fu">reverse</span>(nums<span class="op">,</span> [num<span class="op">,</span> <span class="op">...</span>summedValue])<span class="op">;</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="fu">reverse</span>([<span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span>])<span class="op">;</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a><span class="co">// -&gt; [8, 3, 1]</span></span></code></pre></div>
<p>Or we can make the higher-order function <code>any</code>:</p>
<div class="sourceCode" id="cb21"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> any <span class="op">=</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>  (predFn) <span class="kw">=&gt;</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>  ([num<span class="op">,</span> <span class="op">...</span>nums]<span class="op">,</span> summedValue <span class="op">=</span> <span class="kw">false</span>) <span class="kw">=&gt;</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>    num <span class="op">===</span> <span class="kw">undefined</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>      <span class="op">?</span> summedValue</span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>      <span class="op">:</span> <span class="fu">any</span>(predFn)(nums<span class="op">,</span> <span class="fu">predFn</span>(num) <span class="op">||</span> summedValue)<span class="op">;</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a><span class="fu">any</span>(isOdd)([<span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">8</span>])<span class="op">;</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a><span class="co">// -&gt; true</span></span></code></pre></div>
<p>Of course, we’re not limited to talking about <code>num</code>s here,
and it doesn’t make sense to say that a <code>summedValue</code> is the
thing we’re returning, so I’m going to do something that you may find
even more offensive (bear with me 🐻) and rename these variables to the
more generic <code>x</code> and <code>acc</code> (short for
<em>accumulated value</em> or <em>accumulator</em>):</p>
<div class="sourceCode" id="cb22"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sum <span class="op">=</span> ([x<span class="op">,</span> <span class="op">...</span>xs]<span class="op">,</span> acc <span class="op">=</span> <span class="dv">0</span>) <span class="kw">=&gt;</span> (x <span class="op">===</span> <span class="kw">undefined</span> <span class="op">?</span> acc <span class="op">:</span> <span class="fu">sum</span>(xs<span class="op">,</span> acc <span class="op">+</span> x))<span class="op">;</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> reverse <span class="op">=</span> ([x<span class="op">,</span> <span class="op">...</span>xs]<span class="op">,</span> acc <span class="op">=</span> []) <span class="kw">=&gt;</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>  x <span class="op">===</span> <span class="kw">undefined</span> <span class="op">?</span> acc <span class="op">:</span> <span class="fu">reverse</span>(xs<span class="op">,</span> [x<span class="op">,</span> <span class="op">...</span>acc])<span class="op">;</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> any <span class="op">=</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>  (predFn) <span class="kw">=&gt;</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a>  ([x<span class="op">,</span> <span class="op">...</span>xs]<span class="op">,</span> acc <span class="op">=</span> <span class="kw">false</span>) <span class="kw">=&gt;</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a>    x <span class="op">===</span> <span class="kw">undefined</span> <span class="op">?</span> acc <span class="op">:</span> <span class="fu">any</span>(predFn)(xs<span class="op">,</span> <span class="fu">predFn</span>(x) <span class="op">||</span> acc)<span class="op">;</span></span></code></pre></div>
<p>Refactoring things to this minimal representation allows us to more
easily see a pattern: notice that in each of these functions, we have
some operation that combines our <code>x</code> with <code>acc</code>
somehow—whether addition, concatenation or logical disjunction (the
<code>||</code> operator)—and we’re initializing the <code>acc</code>
variable with some value that is <em>neutral</em> in regards to that
operation—<code>0</code> for <code>+</code>, <code>[]</code> for
concatenation, and <code>false</code> for <code>||</code>.<a href="#fn2"
class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a>
Aside from those two unique elements, everything else is repetition that
we should be able to factor out into its own function. Let’s call it
<code>fold</code>:</p>
<div class="sourceCode" id="cb23"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> fold <span class="op">=</span> ([x<span class="op">,</span> <span class="op">...</span>xs]<span class="op">,</span> acc<span class="op">,</span> foldingFn) <span class="kw">=&gt;</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>  x <span class="op">===</span> <span class="kw">undefined</span> <span class="op">?</span> acc <span class="op">:</span> <span class="fu">fold</span>(xs<span class="op">,</span> <span class="fu">foldingFn</span>(acc<span class="op">,</span> x)<span class="op">,</span> foldingFn)<span class="op">;</span></span></code></pre></div>
<p>This may seem like a lot to behold, but all that I’ve done is taken
our template and changed it so that <code>acc</code> no longer has a
default value (we’ll have to leave that to the caller to pass in, since
it depends on what “combining” operation they are doing) and we’re also
passing in an extra parameter: a <code>foldingFn</code>, or folding
function, for lack of a better term—this is the same thing as the
“combining” operation (addition/concatenation/disjunction) expressed as
a function that takes <code>acc</code> and <code>x</code> (current
value). Now I can re-write <code>sum</code>, <code>reverse</code>, and
<code>any</code> in terms of <code>fold</code>:</p>
<div class="sourceCode" id="cb24"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sum <span class="op">=</span> (xs) <span class="kw">=&gt;</span> <span class="fu">fold</span>(xs<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> (acc<span class="op">,</span> x) <span class="kw">=&gt;</span> x <span class="op">+</span> acc)<span class="op">;</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> reverse <span class="op">=</span> (xs) <span class="kw">=&gt;</span> <span class="fu">fold</span>(xs<span class="op">,</span> []<span class="op">,</span> (acc<span class="op">,</span> x) <span class="kw">=&gt;</span> [x<span class="op">,</span> <span class="op">...</span>acc])<span class="op">;</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> any <span class="op">=</span> (predFn) <span class="kw">=&gt;</span> (xs) <span class="kw">=&gt;</span> <span class="fu">fold</span>(xs<span class="op">,</span> <span class="kw">false</span><span class="op">,</span> (acc<span class="op">,</span> x) <span class="kw">=&gt;</span> <span class="fu">predFn</span>(x) <span class="op">||</span> acc)<span class="op">;</span></span></code></pre></div>
<p>This works, but we can do a little better by arranging
<code>fold</code> so it can be used <em>point free</em>:</p>
<div class="sourceCode" id="cb25"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> fold <span class="op">=</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>  (foldingFn<span class="op">,</span> acc) <span class="kw">=&gt;</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>  ([x<span class="op">,</span> <span class="op">...</span>xs]) <span class="kw">=&gt;</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>    x <span class="op">===</span> <span class="kw">undefined</span> <span class="op">?</span> acc <span class="op">:</span> <span class="fu">fold</span>(foldingFn<span class="op">,</span> <span class="fu">foldingFn</span>(acc<span class="op">,</span> x))(xs)<span class="op">;</span></span></code></pre></div>
<p>This lets us clean up our other functions a little bit:</p>
<div class="sourceCode" id="cb26"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> sum <span class="op">=</span> <span class="fu">fold</span>((acc<span class="op">,</span> x) <span class="kw">=&gt;</span> x <span class="op">+</span> acc<span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> reverse <span class="op">=</span> <span class="fu">fold</span>((acc<span class="op">,</span> x) <span class="kw">=&gt;</span> [x<span class="op">,</span> <span class="op">...</span>acc]<span class="op">,</span> [])<span class="op">;</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> any <span class="op">=</span> (predFn) <span class="kw">=&gt;</span> <span class="fu">fold</span>((acc<span class="op">,</span> x) <span class="kw">=&gt;</span> <span class="fu">predFn</span>(x) <span class="op">||</span> acc<span class="op">,</span> <span class="kw">false</span>)<span class="op">;</span></span></code></pre></div>
<h2 id="fold-unmasked"><code>fold</code> unmasked</h2>
<p>Turns out <code>fold</code> is something we already know and love in
JavaScript—it’s just <code>reduce</code>!<a href="#fn3"
class="footnote-ref" id="fnref3" role="doc-noteref"><sup>3</sup></a></p>
<div class="sourceCode" id="cb27"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> reduce <span class="op">=</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>  (reducer<span class="op">,</span> acc) <span class="kw">=&gt;</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>  ([x<span class="op">,</span> <span class="op">...</span>xs]) <span class="kw">=&gt;</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>    x <span class="op">===</span> <span class="kw">undefined</span> <span class="op">?</span> acc <span class="op">:</span> <span class="fu">reduce</span>(reducer<span class="op">,</span> <span class="fu">reducer</span>(acc<span class="op">,</span> x))(xs)<span class="op">;</span></span></code></pre></div>
<p>Granted it’s a standalone version, not a method on the
<code>Array</code> prototype, but it works just the same. And we can
define other array functions than just <code>sum</code>,
<code>reverse</code> and <code>any</code> with it; in fact,
<strong>any</strong> array transformation can be defined in terms of
<code>reduce</code> (that’s an open challenge!), which is pretty
powerful stuff.</p>
<h2 id="big-words-to-google">Big words to google</h2>
<p><em>Whew</em>, this has been a doozy of a post, and I’ve pretty much
exhausted my knowledge about this stuff so I can’t say much more with
certainty, but if you’re interested in learning more I’d say it might be
worthwhile looking into how the <code>reduce</code>/<code>fold</code>
function is generalized by the concept of a <em>catamorphism</em> (which
is one of many <em>recursion schemes</em>).<a href="#fn4"
class="footnote-ref" id="fnref4" role="doc-noteref"><sup>4</sup></a> Of
course <code>reduce</code> doesn’t have to be defined recursively, we
could write it iteratively, it’s just an implementation detail,<a
href="#fn5" class="footnote-ref" id="fnref5"
role="doc-noteref"><sup>5</sup></a> but it gives us a way of abstracting
out this very powerful pattern. And I <em>think</em> the power of
recursion schemes in general is that you can abstract out such patterns
not just for arrays but for any data structure (like linked lists,
trees, maps, etc.)—but, not sure yet. To be continued… 🕵️‍♂️</p>
<div class="erratum">
<p><strong>Erratum:</strong> It’s been pointed out to me that
<code>fold</code> does <em>not</em> work exactly like
<code>reduce</code>, in that the <code>initialValue</code> is optional
in the latter. A more faithful recursive version might be written:</p>
<div class="sourceCode" id="cb28"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> fold <span class="op">=</span> (foldingFn<span class="op">,</span> acc) <span class="kw">=&gt;</span> ([x<span class="op">,</span> <span class="op">...</span>xs]) <span class="kw">=&gt;</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>  acc <span class="op">!==</span> <span class="kw">undefined</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">?</span> x <span class="op">===</span> <span class="kw">undefined</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>          <span class="op">?</span> acc</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>          <span class="op">:</span> <span class="fu">fold</span>(foldingFn<span class="op">,</span> <span class="fu">foldingFn</span>(acc<span class="op">,</span> x))(xs)</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">:</span> <span class="fu">fold</span>(foldingFn<span class="op">,</span> x)(xs)</span></code></pre></div>
</div>
<section id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>Notice that I’m doing the destructuring straightaway as
part of the function call, which means I’ve lost my way to reference the
whole array (<code>arr</code> is nowhere to be found) and so I’m
checking for the head (<code>num</code>) to be <code>undefined</code>,
which strictly speaking is not the same as the array having length
<code>0</code>—if you’re working with a sparsely-defined array (like,
<code>[1, , 8]</code> or <code>[1, undefined, 8]</code>) this won’t
work—but for our purposes we’ll pretend they’re equivalent. 🤫<a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>If I add <code>0</code> to any number, I’ll just get
that number back. If I concatenate <code>[]</code> to any array, I’ll
just get that array back. If I say <code>x || false</code> where
<code>x</code> is some boolean, I’ll just get <code>x</code> back.<a
href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Though it <em>is</em> often called <code>fold</code> in
other languages.<a href="#fnref3" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
<li id="fn4"><p>A <em>catamorphism</em> is described as a function that
“destruct[s] a list” or other data structure (in other words, a function
<em>from</em> a structure containing type <span
class="math inline"><em>A</em></span> <em>to</em> a value of type <span
class="math inline"><em>B</em></span>). See <a
href="https://maartenfokkinga.github.io/utwente/mmf91m.pdf">“Functional
Programming with Bananas, Lenses, Envelopes and Barbed Wire”</a>.<a
href="#fnref4" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn5"><p>Hope you don’t feel cheated by my mentioning that in the
last paragraph!<a href="#fnref5" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></content>
  </entry>
  <entry>
    <title>Better Readability with Function Composition</title>
    <link href="https://ptrfrncsmrph.github.ioposts/2018-07-03-function-composition.html"/>
    <id>https://ptrfrncsmrph.github.ioposts/2018-07-03-function-composition.html</id>
    <updated>2018-07-03T00:00:00Z</updated>
    <summary></summary>
    <content type="html"><![CDATA[<div class="tldr">
<p><strong>TL;DR</strong> Function composition is an early win on the FP
learning curve, and the best presentation of this material I’ve found is
in the <a
href="https://mostly-adequate.gitbooks.io/mostly-adequate-guide/"><em>Prof
Frisby</em> book</a>, so I’d point to that as a primary resource. If
interested in jumping ahead to some composition exercises (and slightly
easier than those in the book), check out either <a
href="https://github.com/kyleshevlin/fp-composition-exercises">Kyle
Shevlin’s</a> or <a href="https://gitlab.com/ccfp/intro-to-fp">my own
repo</a> (based on his).</p>
</div>
<p>Last week we had our first meetup, and I thought I would sum up what
was covered for those that couldn’t make it. The goal was to cover the
concept of <em>function composition</em>: in short, composing small,
simple functions into bigger, more complex ones. I hope this post is
read as a supplement or companion piece to other more in-depth
treatments of the subject, as I may gloss over or neglect to mention a
lot of concepts that help contribute to a better understanding of
function composition, namely: <em>purity</em>, <em>immutability</em>,
<em>higher-order functions</em>, <em>currying</em> and <em>partial
application</em>. For a quick overview of some of those concepts (in
JavaScript), I recommend <a
href="https://www.youtube.com/watch?v=e-5obm1G_FY">this talk</a> by
Anjana Vakil, or <a
href="https://www.youtube.com/watch?v=-4QNj7TJjgo">this one</a> by Kyle
Shevlin. Khan Academy also has a helpful <a
href="https://www.khanacademy.org/math/algebra2/manipulating-functions/function-composition/v/function-composition">section
on composing functions</a> with diagrams and probably better, more
in-depth explanations than you’ll find below.</p>
<h2 id="taking-a-page-out-of-your-high-school-algebra-book">Taking a
page out of your high school algebra book</h2>
<p>You may remember function composition from high school math:</p>
<p><span
class="math display"><em>g</em>(<em>f</em>(<em>x</em>)) = (<em>g</em>∘<em>f</em>)(<em>x</em>)</span></p>
<p>On the left hand side of the equation, we’re <em>applying</em> the
function <span class="math inline"><em>f</em></span> to <span
class="math inline"><em>x</em></span> (or in programming parlance,
calling <span class="math inline"><em>f</em></span> with <span
class="math inline"><em>x</em></span> as argument) and then applying
<span class="math inline"><em>g</em></span> to the result. On the right
hand side we are introducing the composition operator (little circle)
and saying that the composed function <span
class="math inline"><em>g</em> ∘ <em>f</em></span> applied to <span
class="math inline"><em>x</em></span> yields the same result.</p>
<p>It may not be obvious how that concept could be useful, but consider
a case where the nesting of parentheses (or function calls, however you
want to think of it) gets a bit out of hand:</p>
<p><span
class="math display"><em>j</em>(<em>i</em>(<em>h</em>(<em>g</em>(<em>f</em>(<em>x</em>))))) = (<em>j</em>∘<em>i</em>∘<em>h</em>∘<em>g</em>∘<em>f</em>)(<em>x</em>)</span></p>
<p>In this case, composition allows us to think about a single composed
function (<span
class="math inline"><em>j</em> ∘ <em>i</em> ∘ <em>h</em> ∘ <em>g</em> ∘ <em>f</em></span>)
that will be applied to an <span class="math inline"><em>x</em></span>.
Contrast that with the left side where we have to first call <span
class="math inline"><em>f</em>(<em>x</em>)</span>, and then pass the
result to <span class="math inline"><em>g</em></span>, then pass that
result to <span class="math inline"><em>h</em></span> and so on.</p>
<h2 id="real-world-application">Real world application</h2>
<p>Suppose you want to write a function that converts a roof pitch<a
href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a> to degrees. E.g., for the input
<em>string</em> <code>"5:12"</code>, we want to return the
<em>number</em> <code>22.6</code>. A first attempt might go like so:</p>
<div class="sourceCode" id="cb1"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> pitchToDegrees <span class="op">=</span> (str) <span class="kw">=&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="bu">Math</span><span class="op">.</span><span class="fu">round</span>(</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    ((<span class="bu">Math</span><span class="op">.</span><span class="fu">atan</span>(<span class="op">+</span>str<span class="op">.</span><span class="fu">split</span>(<span class="ss">/</span><span class="sc">[:/]</span><span class="ss">/</span>)[<span class="dv">0</span>] <span class="op">/</span> <span class="op">+</span>str<span class="op">.</span><span class="fu">split</span>(<span class="ss">/</span><span class="sc">[:/]</span><span class="ss">/</span>)[<span class="dv">1</span>]) <span class="op">*</span> <span class="dv">180</span>) <span class="op">/</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>      <span class="bu">Math</span><span class="op">.</span><span class="cn">PI</span>) <span class="op">*</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>      <span class="dv">10</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  ) <span class="op">/</span> <span class="dv">10</span><span class="op">;</span></span></code></pre></div>
<p>Which works alright, but it’s not so easy to follow how that initial
string <em>flows</em> through each step of the function to produce the
final result. You could try to make it more explicit by assigning each
step to a variable:</p>
<div class="sourceCode" id="cb2"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> pitchToDegrees <span class="op">=</span> (str) <span class="kw">=&gt;</span> {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> splitStr <span class="op">=</span> str<span class="op">.</span><span class="fu">split</span>(<span class="ss">/</span><span class="sc">[:/]</span><span class="ss">/</span>)<span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> splitNums <span class="op">=</span> splitStr<span class="op">.</span><span class="fu">map</span>(<span class="bu">Number</span>)<span class="op">;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> radians <span class="op">=</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">atan</span>(splitNums[<span class="dv">0</span>] <span class="op">/</span> splitNums[<span class="dv">1</span>])<span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> degrees <span class="op">=</span> (radians <span class="op">*</span> <span class="dv">180</span>) <span class="op">/</span> <span class="bu">Math</span><span class="op">.</span><span class="cn">PI</span><span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">const</span> rounded <span class="op">=</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">round</span>(degrees <span class="op">*</span> <span class="dv">10</span>) <span class="op">/</span> <span class="dv">10</span><span class="op">;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> rounded<span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>But that gets pretty verbose, and since you’re just passing each
result into the next expression, it might be more natural to read this
as a composed function:</p>
<div class="sourceCode" id="cb3"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> pitchToDegree <span class="op">=</span> <span class="fu">compose</span>(</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="fu">roundTo</span>(<span class="dv">1</span>)<span class="op">,</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  radiansToDegrees<span class="op">,</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  ([rise<span class="op">,</span> run]) <span class="kw">=&gt;</span> <span class="bu">Math</span><span class="op">.</span><span class="fu">atan</span>(rise <span class="op">/</span> run)<span class="op">,</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">map</span>(parseFloat)<span class="op">,</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="fu">split</span>(<span class="ss">/</span><span class="sc">[:/]</span><span class="ss">/</span>)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>)<span class="op">;</span></span></code></pre></div>
<p>I think this strikes a balance between terseness and easy readability
(once you get used to reading composed functions from right-to-left,
bottom-to-top). It’s also <a
href="https://www.youtube.com/watch?v=SfWR3dKnFIo">been pointed out</a>
that this style of programming lends to more reliable, safer code, as it
is harder to hack (in the sense of throwing things together in an
undisciplined or naive manner). Every returned value has to necessarily
flow into the next function; you really have to go out of your way to do
any side effect-y things.<a href="#fn2" class="footnote-ref" id="fnref2"
role="doc-noteref"><sup>2</sup></a></p>
<p>It does require a little bit of setup beforehand with some helper
functions:</p>
<div class="sourceCode" id="cb4"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> map <span class="op">=</span> (fn) <span class="kw">=&gt;</span> (arr) <span class="kw">=&gt;</span> arr<span class="op">.</span><span class="fu">map</span>(fn)<span class="op">;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> split <span class="op">=</span> (regEx) <span class="kw">=&gt;</span> (str) <span class="kw">=&gt;</span> str<span class="op">.</span><span class="fu">split</span>(regEx)<span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> roundTo <span class="op">=</span> (digits) <span class="kw">=&gt;</span> (num) <span class="kw">=&gt;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="bu">Math</span><span class="op">.</span><span class="fu">round</span>(num <span class="op">*</span> <span class="dv">10</span> <span class="op">**</span> digits) <span class="op">/</span> <span class="dv">10</span> <span class="op">**</span> digits<span class="op">;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> radiansToDegrees <span class="op">=</span> (rads) <span class="kw">=&gt;</span> (rads <span class="op">*</span> <span class="dv">180</span>) <span class="op">/</span> <span class="bu">Math</span><span class="op">.</span><span class="cn">PI</span><span class="op">;</span></span></code></pre></div>
<p>That might seem like a lot of work defining all these small, super
simple functions, but that’s kind of the name of the game with
functional programming, and the idea is that it pays off because all
these little functions are easy to test and are usually very re-usable<a
href="#fn3" class="footnote-ref" id="fnref3"
role="doc-noteref"><sup>3</sup></a>. If you don’t feel like rolling your
own tiny functions by hand, it’s easy enough to pull them in from a
handy library like <a href="https://ramdajs.com">ramda</a> or <a
href="https://github.com/lodash/lodash/wiki/FP-Guide">lodash/fp</a>,
which will have most of what you would need and more. We haven’t covered
the one function that makes it possible to glue all the little functions
together, a simple definition for which might look like:</p>
<div class="sourceCode" id="cb5"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> compose <span class="op">=</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  (<span class="op">...</span>fns) <span class="kw">=&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  (x) <span class="kw">=&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    fns<span class="op">.</span><span class="fu">reduceRight</span>((acc<span class="op">,</span> fn) <span class="kw">=&gt;</span> <span class="fu">fn</span>(acc)<span class="op">,</span> x)<span class="op">;</span></span></code></pre></div>
<p>This definition can look pretty gnarly if you’re not used to looking
at the array <code>reduce</code> method and the function that it takes
as an argument, or the rest parameters syntax in JavaScript—but I
wouldn’t worry if it looks alien. If it helps, you can think of it as
the more generalized version of what we’re doing here:</p>
<div class="sourceCode" id="cb6"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> compose2 <span class="op">=</span> (g<span class="op">,</span> f) <span class="kw">=&gt;</span> x <span class="kw">=&gt;</span> <span class="fu">g</span>(<span class="fu">f</span>(x))</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> compose3 <span class="op">=</span> (h<span class="op">,</span> g<span class="op">,</span> f) <span class="kw">=&gt;</span> x <span class="kw">=&gt;</span> <span class="fu">h</span>(<span class="fu">g</span>(<span class="fu">f</span>(x)))</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> compose4 <span class="op">=</span> (i<span class="op">,</span> h<span class="op">,</span> g<span class="op">,</span> f) <span class="kw">=&gt;</span> x <span class="kw">=&gt;</span> <span class="fu">i</span>(<span class="fu">h</span>(<span class="fu">g</span>(<span class="fu">f</span>(x))))</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span></code></pre></div>
<p>Or you can just start using it and worry about the details behind how
it’s implemented later, which tends to be how I learn. If you’re
interested in learning more, this material is covered in the first five
chapters of <a
href="https://mostly-adequate.gitbooks.io/mostly-adequate-guide/"><em>Professor
Frisby Mostly Adequate Guide</em></a>, or if you want to fast forward to
trying out some composition exercises I have a <a
href="https://gitlab.com/ccfp/intro-to-fp">repo of some here</a>.</p>
<div class="sourceCode" id="cb7"><pre
class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">const</span> trace <span class="op">=</span> (msg) <span class="kw">=&gt;</span> (x) <span class="kw">=&gt;</span> {</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>  <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(msg<span class="op">,</span> x)<span class="op">;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> x<span class="op">;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>}<span class="op">;</span></span></code></pre></div>
<p>Just drop it in in the middle of a composed function and you can have
a peek at what’s being passed through at that point.</p>
<section id="footnotes" class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1"><p>The steepness of the roof of a house is often expressed
(at least in the US) in terms of common <em>pitches</em> such as 5:12,
6:12, 8:12, 10:12, where the first number is the rise in inches over a
12 inch span (so, 5:12 is read as “5 over 12”, or just a “5 pitch”).
Roofers and architects alike think of the angle of a roof in these
terms.<a href="#fnref1" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
<li id="fn2"><p>Speaking of which, a handy (and impure) function that I
often rely on to debug when writing functions in this way is<a
href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3"><p>Okay, maybe <code>radiansToDegrees</code> isn’t super
re-usable.<a href="#fnref3" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
</ol>
</section>]]></content>
  </entry>
  <entry>
    <title>Resources for Learning FP</title>
    <link href="https://ptrfrncsmrph.github.ioposts/2018-06-08-fp-resources.html"/>
    <id>https://ptrfrncsmrph.github.ioposts/2018-06-08-fp-resources.html</id>
    <updated>2018-06-08T00:00:00Z</updated>
    <category term="fp"/>
    <category term="learning"/>
    <summary></summary>
    <content type="html"><![CDATA[<p>There are many paths to Functional Programming Land, and an
embarrassment of riches when it comes to learning materials. I’ve tried
my best to hand-pick out some of the better ones I’ve come across and
categorize them according to a given starting point or “use case”. I’ve
also tried to sort each section by how easy or accessible they are to
beginners. I’m by no means an expert on any of this stuff—I’m still
early on on the learning curve myself—but I’ve at least attempted most
of the tutorials listed and what I lack in expertise I’ll try my best to
make up for in empathy. So if you find you could use some guidance or
help getting through any of the material, I’m happy to help.</p>
<h2 id="what-is-functional-programming">What is Functional
Programming?</h2>
<p>Before assuming that you want to learn FP, it may help to get an
inkling as to what it is:</p>
<blockquote>
<p>FP is just programming with functions. Functions are:</p>
<ol type="1">
<li>Total: They return an output for every input.</li>
<li>Deterministic: They return the same output for the same input.</li>
<li>Pure: Their only effect is computing the output.</li>
</ol>
<p>The rest is just composition you can learn over time.</p>
<div style="text-align:right;">
– <em>John De Goes</em>
</div>
</blockquote>
<p>While that’s true enough, it might not be quite enough to get you
started. Here are a few bird’s-eye overview talks/presentations that I
think are helpful or that I’ve heard recommended:</p>
<ol type="1">
<li><a href="https://www.youtube.com/watch?v=e-5obm1G_FY">Learning
Functional Programming with JavaScript</a> by Anjana Vakil. A quick,
informal presentation of some functional concepts in JS such as
functional purity, array methods, immutability and persistent data
structures, from a beginner’s perspective.</li>
<li><a href="https://soundcloud.com/lambda-cast">LambdaCast</a> “The
podcast about learning functional programming from the perspective of a
working developer.” Hosted by David Koontz and a handful of guests with
varying degrees of functional programming knowledge—I found it very
helpful to have a complete beginner’s perspective represented in the
discussion. I’d recommend the first episode or two to start, but the
series as a whole serves as a good companion to learning these
concepts.</li>
<li><a
href="https://www.functionalgeekery.com/episode-61-susan-potter/">Susan
Potter on <em>Functional Geekery</em></a> (Jump to about the 5:15 mark
to skip the sponsor plugs.) About Susan’s transition from “smug OOP”
systems programmer in Java/C++ to embracing Erlang and Haskell and the
benefits of the abstractions that functional programming has afforded
her. Some of it is over my head but maybe useful for those coming from
similar background to hers.</li>
<li><a href="https://fsharpforfunandprofit.com/fppatterns/">Functional
Design Patterns</a> by Scott Wlaschin. Covers much of the same material,
but if you’re anything like me you’ll benefit from hearing/reading these
things explained more than one way.</li>
</ol>
<h2 id="learning-functional-programming-in-javascript">Learning
Functional Programming in JavaScript</h2>
<p>So you’re sold on FP as a worthwhile paradigm and you know a bit of
JavaScript, how do you get started with functional JS?</p>
<ol type="1">
<li><a href="https://www.youtube.com/watch?v=HB1ZC7czKRs">JavaScript30:
Array Cardio</a> with Wes Bos. This whole course is a good JavaScript
tutorial series, and Wes is good at being entertaining and engaging. I’d
recommend this tutorial in particular as a solid introduction to “the
gateway drug(s) to functional programming”: the array methods of map,
filter, sort, reduce. Plus he has exercises to work through which is
key.</li>
<li><a
href="https://www.youtube.com/watch?v=BMUiFMZr7vk&amp;list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84">FunFunFunction:
FP in JS</a> (another YouTube series) with MPJ. Stick with the first
four episodes for a more in-depth exploration of JS array methods.</li>
<li><a
href="https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/functional-programming">FreeCodeCamp</a>
has a whole section on functional JS if you want to test your knowledge.
The instant gratification that comes with completing a passing test is
👌. A good challenge to set for yourself is to try to get through as
much of the <a
href="https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/intermediate-algorithm-scripting">algorithms</a>
problem set as you can without using a <code>for</code>-loop.</li>
<li><a
href="https://mostly-adequate.gitbooks.io/mostly-adequate-guide/"><em>Professor
Frisby’s Mostly Adequate Guide to Functional Programming</em></a> by
Brian Lonsdorf (aka Dr Boolean). I <strong><em>strongly</em></strong>
recommend this one, above and beyond all functional JS guides, once
you’re comfortable enough with the language. Manipulating arrays is
great and all, and sometimes very useful, but if you want to get deeper
into implementing some functional patterns this is your ticket.</li>
<li><a
href="https://egghead.io/courses/professor-frisby-introduces-composable-functional-javascript"><em>Professor
Frisby Introduces Composable Functional JavaScript</em></a> from same
author. This is a stop-motion video series featuring woodland creatures
in a classroom setting, all while managing to be very educational. It
does start a bit in the deep end, but coding along and re-watching a few
times are rewarded.</li>
<li><a href="http://www.tomharding.me/fantasy-land/">Fantas, Eel, and
Specification</a> by Tom Harding. A series of blog posts that have
proved quite popular though I haven’t (<em>yet</em>) worked my way
through all of them. In the author’s words, it’s a series “in vanilla
JS, going through everything you’d need to know to be a Haskell
programmer.”</li>
</ol>
<h2 id="learning-a-functional-programming-language">Learning a
Functional Programming Language</h2>
<p>If you really want to go all-in 🏊🏼‍♀️ and make the deep dive into a
purely-functional, statically-typed language, then I welcome you to come
along with me!</p>
<ol type="1">
<li><a href="http://haskellbook.com"><em>Haskell Programming from First
Principles</em></a> (or <em>Haskell Book</em> for short) by Chris Allen
and Julie Moronuki. This is a <em>very</em> long book (I’m currently
only 2/3 of the way through after over two months), but it starts from
absolute beginner-level and follows a very principled and
well-researched approach to learning the language.</li>
<li><a
href="http://www.seas.upenn.edu/%7Ecis194/spring13/lectures.html">Brent
Yorgey’s CIS 194 course</a> Recommended as the best <em>free</em>
resource for learning Haskell (if you don’t want to buy <em>Haskell
Book</em>).</li>
<li><a href="https://leanpub.com/purescript/read"><em>PureScript by
Example</em></a> by Phil Freeman, the author of the PureScript language.
Very much Haskell-inspired, so I’ve heard it recommended to get familiar
with the concepts and syntax of Haskell first, since there are more
resources for learning the latter.</li>
</ol>
<h2 id="learning-the-lambda-calculus">Learning the Lambda Calculus</h2>
<p>All functional programming languages have at their root the lambda
calculus invented (or <a
href="https://www.youtube.com/watch?v=IOiZatlZtGU&amp;t=1345s"><em>discovered?</em></a>)
by Alonzo Church in the 1930s. This is a subject worthy of study in its
own right, but starting to think in terms of the abstractions involved
in combinatory logic can be a very powerful exercise. I think the best
introduction I’ve found was in the first chapter of <em>Haskell
Book</em>, but since that is not freely available, I’ve tried to find
some alternative resources. A lot of these tutorials cover the same
material in different media and with different approaches; I’ve found
that it usually takes a repeated exposure to the concepts presented in a
variety of ways before I finally start to develop an intuition.</p>
<h3 id="videos">Videos</h3>
<ol type="1">
<li><a
href="https://www.youtube.com/watch?v=eis11j_iGMs&amp;t=23s">Lambda
Calculus (Computerphile video)</a> with Prof Graham Hutton. A perhaps
too-quick run-through of the fundamentals, but he offers a good beginner
challenge: implement the logical <code>AND</code> operator
(<code>&amp;&amp;</code> in JavaScript) and the logical <code>OR</code>
operator (<code>||</code>) in terms of the lambda calculus.</li>
<li><a href="https://youtu.be/3VQ382QG-y4">Fundamentals of Lambda
Calculus</a> by Gabriel Lebec. A couple hour-long presentations on the
subject, with LC syntax presented alongside JavaScript.</li>
</ol>
<h3 id="reading-online">Reading (online)</h3>
<ol type="1">
<li><a
href="https://medium.com/@ahlechandre/lambda-calculus-with-javascript-897f7e81f259">Lambda
Calculus with JavaScript (Medium article)</a> by Alexandre Thebaldi</li>
<li><a href="https://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf">A
Tutorial Introduction to the Lambda Calculus</a> by Raúl Rojas.
Presented as “a short and painless introduction to the λ calculus.” I
personally found it a little difficult to follow as my first
introduction (your mileage may vary), but a good supplement to other
more accessible readings.</li>
<li><a
href="http://www.nyu.edu/projects/barker/Lambda/barendregt.94.pdf">Introduction
to Lambda Calculus</a> by Henk Barendregt and Erik Barendsen. I haven’t
tried to get through this.</li>
</ol>
<h3 id="reading-print">Reading (print)</h3>
<ol type="1">
<li><a href="http://www.wikiwand.com/en/To_Mock_a_Mockingbird"><em>To
Mock a Mockingbird</em></a> by Raymond Smullyan. Combinatory logic
puzzles. I haven’t read this but I’ve heard it recommended enough times
that I thought I’d add it here (also available from at least <a
href="http://www.clamsnet.org/search~S1?/Xsmullyan&amp;searchscope=1&amp;SORT=D/Xsmullyan&amp;searchscope=1&amp;SORT=D&amp;SUBKEY=smullyan/1%2C4%2C4%2CB/frameset&amp;FF=Xsmullyan&amp;searchscope=1&amp;SORT=D&amp;2%2C2%2C">one
Cape library</a>).</li>
</ol>]]></content>
  </entry>
</feed>
