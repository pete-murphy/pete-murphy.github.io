<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WIP</title>
  <link href="https://ptrfrncsmrph.github.io" rel="self" type="application/rss+xml" />
  <updated></updated>
  <author>
    <name>Pete</name>
  </author>
  <id>https://ptrfrncsmrph.github.io/</id>

  <entry>
    <title>Experimenting with View Transitions API in React</title>
    <link href="https://ptrfrncsmrph.github.ioposts/react-router-view-transitions-api.html"/>
    <id>https://ptrfrncsmrph.github.ioposts/react-router-view-transitions-api.html</id>
    <updated>2023-05-17T00:00:00Z</updated>
    <category term="react"/>
    <category term="react-router"/>
    <category term="view transitions"/>
    <summary></summary>
    <content type="html"><![CDATA[<p>Recently I wanted to implement something like what Material UI calls
the <a
href="https://m3.material.io/styles/motion/transitions/transition-patterns#b67cba74-6240-4663-a423-d537b6d21187">container
transform pattern</a>. From the Material 3 docs:</p>
<blockquote>
<p>This pattern is used to seamlessly transform an element to show more
detail, like a card expanding into a details page. […] Persistent
elements are used to seamlessly connect the start and end state of the
transition.</p>
</blockquote>
<p>Here’s a simple example in a GIF</p>
<p><img src="../images/2023-05-21-container-transform.gif" /></p>
<p>The pattern isn’t unique to Material or Google, it’s used for example
in iOS when opening an app from the home screen. Can’t really speak on
how easy this is to implement on mobile, but on the web the
implementation has historically been complicated by the variety of
layout rules that need to be taken into account (Cassie Evans has an
excellent <a href="https://www.youtube.com/watch?v=POBxxUkvHi4">talk
about the difficulties involved here</a>).</p>
<p>The solution that folks seem to have landed on for this is the <a
href="https://aerotwist.com/blog/flip-your-animations/">FLIP
technique</a>. It’s a bit of a magic trick summarized by Paul Lewis
here</p>
<blockquote>
<p>instead of animating “straight ahead” and potentially doing expensive
calculations on every single frame we precalculate the animation
dynamically and let it play out cheaply.</p>
</blockquote>
<p>There are some libraries for implementing this technique, like <a
href="https://greensock.com/docs/v3/Plugins/Flip/">GSAP</a> or <a
href="https://github.com/davidkpiano/flipping">Flipping.js</a>. In
React, <code>framer/motion</code> provides a high-level API for using
this to achieve “shared layout animations” with its <a
href="https://www.framer.com/motion/layout-group/"><code>LayoutGroup</code></a>
component.</p>
<h2 id="view-transitions-api">View Transitions API</h2>
<p>But there’s also a new high-level API for this technique coming to
the browser, in the <a
href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API">View
Transitions API</a>. This is still a <a
href="https://drafts.csswg.org/css-view-transitions-1/">draft
specification</a> at time of writing, but it’s landed in Chrome.</p>
<!-- <image-loader
placeholder="../images/2023-05-21-demo/small.gif"
full-image="../images/2023-05-21-demo/large.gif"
/> -->
<figure>
<img src="../images/2023-05-21-demo/large.gif"
alt="A simple demo using React Router" />
<figcaption aria-hidden="true">A simple demo using React
Router</figcaption>
</figure>
<p>After a bit of trial-and-error I got a demo working using animated
transitions between routes with React Router. Here’s the repo: <a
href="https://github.com/ptrfrncsmrph/react-view-transitions-api">https://github.com/ptrfrncsmrph/react-view-transitions-api</a>.</p>
<h2 id="some-rough-edges">Some rough edges</h2>
<p><code>startViewTransition</code> takes a callback that
<em>synchronously</em> updates the DOM. The only way I could figure to
do so was using React Router’s <code>useNavigate</code> and a button
with a click handler instead of <code>Link</code> (which feels bad). We
then need to wrap the call to <code>navigate</code> in
<code>flushSync</code> to force the synchronous update. So there ends up
being this nesting of “effects” in order to schedule everything
correctly</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="bu">document</span><span class="op">.</span><span class="fu">startViewTransition</span>(() <span class="kw">=&gt;</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  ReactDOM<span class="op">.</span><span class="fu">flushSync</span>(() <span class="kw">=&gt;</span> {</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">navigate</span>(nextRoute)<span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  })<span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>The React docs warn that <code>flushSync</code> should be used as a
“last resort”, and this API does seem to be at odds with the React
mental model that doesn’t normally care about <em>when</em> DOM updates
happen.</p>
<p>Another awkward bit is the need to toggle the
<code>viewTransitionName</code>s for transitioning elements.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> (ref<span class="op">.</span><span class="at">current</span>) {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  ref<span class="op">.</span><span class="at">current</span><span class="op">.</span><span class="at">style</span><span class="op">.</span><span class="at">viewTransitionName</span> <span class="op">=</span> <span class="st">&quot;movie-image&quot;</span><span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>There needs to be exactly one element with the
<code>"movie-image"</code> transition name at any given time, so <a
href="https://developer.chrome.com/docs/web-platform/view-transitions/#transitioning-elements-dont-need-to-be-the-same-dom-element">the
recommendation</a> seems to be to <em>assign the tag name in the event
handler</em>.</p>
<p>A nicer alternative might be to give unique names to each element,
like <code>movie-image-${movie.id}</code> and then select pairs with
<code>::view-transition-group(movie-image-*)</code> but that syntax
doesn’t exist and as far as I can tell the only way of achieving this
currently would require creating just as many rules in the style sheet
as there are pairs of elements you’d want to target. I started <a
href="https://github.com/ptrfrncsmrph/react-view-transitions-api/compare/main...dynamic-style-sheet-rules">going
down that road</a> but couldn’t get it to work (the transitions
<em>did</em> apply but looked janky for reasons I couldn’t
understand).</p>
<p>This unique name constraint makes “back navigation” transitions (from
detail to list view) rather <a
href="https://github.com/ptrfrncsmrph/react-view-transitions-api/commit/9c2a2775a34a2ea8e3a7e1ff90881cb4c8cf4e53#diff-26ad4b834941d9b19ebf9db8082bd202aaf72ea0ddea85f5a8a0cb3c729cc6f2">messy</a>.
The event handler doesn’t have direct access to what we want to target
as the <code>view-transition-new</code> element, so we need to find it
in the DOM, assign the transition name, wait for the transition to
complete, and finally remove the name (so it can be reassigned to the
next item that gets clicked).</p>]]></content>
  </entry>
</feed>
