<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WIP</title>
  <link href="https://ptrfrncsmrph.github.io" rel="self" type="application/rss+xml" />
  <updated></updated>
  <author>
    <name>Pete</name>
  </author>
  <id>https://ptrfrncsmrph.github.io/</id>

  <entry>
    <title>A syntax-driven intuition for Cont</title>
    <link href="https://ptrfrncsmrph.github.ioposts/cont-and-managed.html"/>
    <id>https://ptrfrncsmrph.github.ioposts/cont-and-managed.html</id>
    <updated>2023-05-30T00:00:00Z</updated>
    <category term="haskell"/>
    <category term="purescript"/>
    <category term="cont"/>
    <summary></summary>
    <content type="html"><![CDATA[<p>Based on the <a
href="https://hackage.haskell.org/package/managed-1.0.10/docs/src/Control.Monad.Managed.html#Managed">internal
accessor <code>(&gt;&gt;-)</code></a> from Gabriella Gonzalez’s
<code>managed</code> library.</p>
<p>PureScript allows us to override the default <code>bind</code>
implementation and re-purpose the <code>do</code> syntax sugar (we could
do the same in Haskell with <code>RebindableSyntax</code> enabled).</p>
<multicodeblock-tabs>
<multicodeblock-tab role="heading" slot="tab">PureScript (with infix operator)</multicodeblock-tab>
<multicodeblock-panel role="region" slot="panel">
<div class="sourceCode" id="cb1"><pre
class="sourceCode purescript"><code class="sourceCode purescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Prelude</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Cont</span> r a <span class="ot">=</span> <span class="dt">Cont</span> ((a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="ot">runCont ::</span> <span class="kw">forall</span> r a<span class="op">.</span> <span class="dt">Cont</span> r a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>runCont (<span class="dt">Cont</span> f) <span class="ot">=</span> f</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="kw">infixl</span> <span class="dv">1</span> runCont as <span class="op">&gt;&gt;-</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">map</span> f ma <span class="ot">=</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>      ma <span class="op">&gt;&gt;-</span> \a <span class="ot">-&gt;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        pure&#39; (f a)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Apply</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>  apply mab ma <span class="ot">=</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>      mab <span class="op">&gt;&gt;-</span> \ab <span class="ot">-&gt;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        ma <span class="op">&gt;&gt;-</span> \a <span class="ot">-&gt;</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>          pure&#39; (ab a)</span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> a <span class="ot">=</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>      pure&#39; a</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Bind</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>  bind ma amb <span class="ot">=</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>      ma <span class="op">&gt;&gt;-</span> \a <span class="ot">-&gt;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>        amb a <span class="op">&gt;&gt;-</span> \b <span class="ot">-&gt;</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>          pure&#39; b</span></code></pre></div>
</multicodeblock-panel>
<multicodeblock-tab role="heading" slot="tab">PureScript (with do)</multicodeblock-tab>
<multicodeblock-panel role="region" slot="panel">
<div class="sourceCode" id="cb2"><pre
class="sourceCode purescript"><code class="sourceCode purescript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Prelude</span> <span class="kw">hiding</span> (bind)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">newtype</span> <span class="dt">Cont</span> r a <span class="ot">=</span> <span class="dt">Cont</span> ((a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ot">bind ::</span> <span class="kw">forall</span> r a<span class="op">.</span> <span class="dt">Cont</span> r a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>bind (<span class="dt">Cont</span> f) <span class="ot">=</span> f</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Functor</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">map</span> f ma <span class="ot">=</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>      a <span class="ot">&lt;-</span> ma</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>      pure&#39; (f a)</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Apply</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>  apply mab ma <span class="ot">=</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>      ab <span class="ot">&lt;-</span> mab</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>      a <span class="ot">&lt;-</span> ma</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>      pure&#39; (ab a)</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Applicative</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> a <span class="ot">=</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>      pure&#39; a</span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Bind</span> (<span class="dt">Cont</span> r) <span class="kw">where</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>  bind ma amb <span class="ot">=</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Cont</span> \pure&#39; <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>      a <span class="ot">&lt;-</span> ma</span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>      b <span class="ot">&lt;-</span> amb a</span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>      pure&#39; b</span></code></pre></div>
</multicodeblock-panel>

</multicodeblock-tabs>]]></content>
  </entry>
  <entry>
    <title>React Router and View Transitions</title>
    <link href="https://ptrfrncsmrph.github.ioposts/react-router-view-transitions-api.html"/>
    <id>https://ptrfrncsmrph.github.ioposts/react-router-view-transitions-api.html</id>
    <updated>2023-05-17T00:00:00Z</updated>
    <category term="react"/>
    <category term="react-router"/>
    <category term="view transitions"/>
    <summary></summary>
    <content type="html"><![CDATA[<h2 id="container-transform">Container transform</h2>
<p>Recently I wanted to implement something like what Material UI calls
the <a
href="https://m3.material.io/styles/motion/transitions/transition-patterns#b67cba74-6240-4663-a423-d537b6d21187">container
transform pattern</a>. From the Material 3 docs:</p>
<blockquote>
<p>This pattern is used to seamlessly transform an element to show more
detail, like a card expanding into a details page. […] Persistent
elements are used to seamlessly connect the start and end state of the
transition.</p>
</blockquote>
<p>Here’s a simple example in a GIF</p>
<figure>
<img src="../images/2023-05-21-container-transform.gif"
alt="An example from the Material UI documentation" />
<figcaption aria-hidden="true">An example from the Material UI
documentation</figcaption>
</figure>
<p>The pattern isn’t unique to Material or Google, it’s used for example
in iOS when opening an app from the home screen. I can’t speak on how
this is implemented on mobile, but on the web the implementation has
historically been complicated by the variety of layout rules that need
to be taken into account (Cassie Evans has an excellent <a
href="https://www.youtube.com/watch?v=POBxxUkvHi4">talk about the
difficulties involved here</a>).</p>
<h2 id="flip">FLIP</h2>
<p>The solution that folks seem to have landed on for this is the <a
href="https://aerotwist.com/blog/flip-your-animations/">FLIP
technique</a>. It’s a bit of a magic trick that involves moving the
element to its final state and then applying a <code>transform</code> so
that we can efficiently animate <em>from</em> the initial state.</p>
<blockquote>
<p>… [I]nstead of animating “straight ahead” and potentially doing
expensive calculations on every single frame we precalculate the
animation dynamically and let it play out cheaply.</p>
</blockquote>
<p>There are some libraries for implementing this, like <a
href="https://greensock.com/docs/v3/Plugins/Flip/">GSAP</a> or <a
href="https://github.com/davidkpiano/flipping">Flipping.js</a>. In
React, <code>framer/motion</code> provides a high-level API for using
this technique to achieve “shared layout animations” with its <a
href="https://www.framer.com/motion/layout-group/"><code>LayoutGroup</code></a>
component.</p>
<h2 id="view-transitions-api">View Transitions API</h2>
<p>But there’s also a new high-level API coming to the browser, in the
<a
href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API">View
Transitions API</a>. This is still a <a
href="https://drafts.csswg.org/css-view-transitions-1/">draft
specification</a> at time of writing, but it’s landed in Chrome. There’s
a nice <a
href="https://developer.chrome.com/docs/web-platform/view-transitions/">write-up
by the Chrome team</a> that serves as a tutorial for using in a
framework-less SPA. Getting this to work in a React app where we don’t
normally manage DOM updates (especially for route transitions) is a bit
trickier.</p>
<!-- <image-loader
placeholder="../images/2023-05-21-demo/small.gif"
full-image="../images/2023-05-21-demo/large.gif"
/> -->
<figure>
<img src="../images/2023-05-21-demo/large.gif"
alt="A simple demo using React Router" />
<figcaption aria-hidden="true">A simple demo using React
Router</figcaption>
</figure>
<p>After a bit of trial-and-error I got a demo working using animated
transitions between routes with React Router. Here’s the repo: <a
href="https://github.com/ptrfrncsmrph/react-view-transitions-api">https://github.com/ptrfrncsmrph/react-view-transitions-api</a>.</p>
<h2 id="some-rough-edges">Some rough edges</h2>
<p><code>startViewTransition</code> takes a callback that
<em>synchronously</em> updates the DOM. The only way I could figure to
do so was using React Router’s <code>useNavigate</code> and a button
with a click handler instead of <code>Link</code> 😔. We then need to
wrap the call to <code>navigate</code> in <code>flushSync</code> to
force the synchronous update.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="bu">document</span><span class="op">.</span><span class="fu">startViewTransition</span>(() <span class="kw">=&gt;</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  ReactDOM<span class="op">.</span><span class="fu">flushSync</span>(() <span class="kw">=&gt;</span> {</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">navigate</span>(nextRoute)<span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  })<span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>})<span class="op">;</span></span></code></pre></div>
<p>The React docs warn that <code>flushSync</code> should be used as a
“last resort”, and this API does seem to be at odds with the React
mental model that doesn’t normally care about <em>when</em> DOM updates
happen.</p>
<p>Another awkward bit is the need to toggle the
<code>viewTransitionName</code>s for transitioning elements.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ts"><code class="sourceCode typescript"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> (ref<span class="op">.</span><span class="at">current</span>) {</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  ref<span class="op">.</span><span class="at">current</span><span class="op">.</span><span class="at">style</span><span class="op">.</span><span class="at">viewTransitionName</span> <span class="op">=</span> <span class="st">&quot;movie-image&quot;</span><span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>There needs to be exactly one element with the
<code>"movie-image"</code> transition name at any given time, so <a
href="https://developer.chrome.com/docs/web-platform/view-transitions/#transitioning-elements-dont-need-to-be-the-same-dom-element">the
recommendation</a> seems to be to <em>assign the tag name in the event
handler</em>.</p>
<p>A nicer alternative might be to give unique names to each element,
like <code>movie-image-${movie.id}</code> and then select pairs with
<code>::view-transition-group(movie-image-*)</code> but that syntax
doesn’t exist and as far as I can tell the only way of achieving this
currently would require creating just as many rules in the style sheet
as there are pairs of elements you’d want to target. I started <a
href="https://github.com/ptrfrncsmrph/react-view-transitions-api/compare/main...dynamic-style-sheet-rules">going
down that road</a> but couldn’t get it to work (the transitions
<em>did</em> apply but looked janky for reasons I couldn’t understand).
<em>(I think this is also the approach one of the authors of the spec
tried in this repo but seems like it had complications: <a
href="https://github.com/jakearchibald/wordle-analyzer/pull/19">https://github.com/jakearchibald/wordle-analyzer/pull/19</a>)</em></p>
<p>This unique name constraint makes “back navigation” transitions (from
detail to list view) <a
href="https://github.com/ptrfrncsmrph/react-view-transitions-api/commit/9c2a2775a34a2ea8e3a7e1ff90881cb4c8cf4e53#diff-26ad4b834941d9b19ebf9db8082bd202aaf72ea0ddea85f5a8a0cb3c729cc6f2">messy</a>.
The event handler doesn’t have direct access to what we want to target
as the <code>view-transition-new</code> element, so we need to find it
in the DOM, assign the transition name, wait for the transition to
complete, and finally remove the name (so it can be reassigned to the
next item that gets clicked).</p>]]></content>
  </entry>
</feed>
